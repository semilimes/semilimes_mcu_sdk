# semilimes sdk for microcontrollers

## ‚ú® What's this about

The Semilimes SDK is a C++ library designed to connect a variety of microcontrollers to the Semilimes advanced messaging service. This SDK is optimized for use with the Arduino IDE but, due to its lack of external dependencies, it can also be used in other environments. The SDK is particularly notable for not utilizing dynamic memory allocation, which means character arrays must be predefined by the user, and the SDK accesses them through pointers.

The SDK allows developers to create JSON messages that conform to the OpenAPI structure used by Semilimes APIs. 
All relevant information about the Semilimes APIs can be found at the following link‚Äã : https://www.semilimes.com/developers/

The documentation for the Semilimes SDKs has been generated using Doxygen and is accessible at the following page: [semilimes sdk documentation](https://semilimes.github.io/semilimes_mcu_sdk/)

These messages can be sent via HTTPS or WebSocket, although the necessary libraries for these connections are not included in the SDK and must be implemented by the user. Semilimes provides example applications to help developers get started, but selecting the most suitable libraries for server connections is the developer's responsibility.

## üîé What do you get

- Arduino IDE Compatibility: The library is designed to work seamlessly with the Arduino IDE.
- No External Dependencies: Can be used with other microcontrollers not compatible with the Arduino IDE due to its lack of external dependencies.
- Low Memory Usage: The library has a small footprint in both flash memory and RAM.
- Static Memory Allocation: Utilizes static memory allocation, which is referenced by the user's code, enhancing performance and predictability.
- Dynamic JSON Configuration: Supports the dynamic configuration and combination of JSON scripts, providing flexibility.
- Compatibility with HTTPS and WebSocket: Compatible with synchronous HTTPS calls and asynchronous WebSocket connections.
- Device Provisioning: Enables a secure device provisioning procedure on the Semilimes platform without requiring public API keys to be defined in the firmware.

## üìΩÔ∏è How does it work

To use the Semilimes APIs, your device must first be connected to the internet. This is essential because, without an internet connection, the device cannot communicate with the Semilimes platform. You'll need to include code in your project that handles this connection, typically through Wi-Fi or another protocol suitable for your hardware.

Once the device is online, the next critical step is called provisioning. Provisioning is the process by which your device is associated with a Semilimes subprofile assigned to your user account. This subprofile acts as a unique identifier, allowing the Semilimes platform to recognize and manage your device.

After the provisioning process is complete, your device can start communicating with Semilimes using the provided APIs. This involves sending and receiving JSON messages structured according to the OpenAPI specifications used by Semilimes. Through these steps, your microcontroller-based device becomes fully integrated into the Semilimes platform, capable of utilizing its advanced messaging and data exchange features.

## ‚öôÔ∏è Provisioning

To perform provisioning on the Semilimes platform, it‚Äôs important to understand that each device has a unique identifier known as a Device ID, which is tied to the hardware. This Device ID is essential for associating the device with a user profile on Semilimes.

To begin the provisioning process, you need to request a pair of keys from the Semilimes Services portal: a Provisioning Key and a Claim Key. The Device ID and provisioning key are embedded into the microcontroller, while the claim key is provided to the user in the form of a QR code.

In the first phase, the device sends a special message to the Semilimes server containing the Device ID and Provisioning Key. However, the device will only be fully activated and associated with the user‚Äôs subaccount after the QR code, containing the Claim Key, is scanned by the user. Once the QR code is scanned, the server sends an API key to the device, which should be stored in non-volatile memory for future connections.

This secure process ensures that the device is correctly linked to the user‚Äôs account and can reliably interact with the Semilimes platform. The keys required for provisioning can be easily requested through your Semilimes Services portal: https://my.semilimes.net/apikeys

## üí°semilimes API call 

To create an API call for Semilimes, it's essential to understand the four types of json scripts and how they interact to facilitate effective communication. Here‚Äôs a detailed overview:

### 1. Account

Account API calls pertain to the parameters related to the user account. These calls manage account-related information such as credentials, user settings, and other specific configurations. Examples of operations you might perform include:

- Creating a new account
- Retrieving account information
- Updating account settings

### 2. Communication 

Communication API calls handle the various means through which messages are sent. This includes channels (e.g., p2p, group chat) and other methods of communication. These calls determine how and where the message is delivered.

### 3. 
## üõ†Ô∏è Troubleshooting 

...
